function model_balls(v1, x1, m1, r1, v2, x2, m2, r2, t, dt, ft)
  %%v1, v2 Ч векторы скорости шаров в момент времени t = 0, м/с;
  %%x1, x2 Ч векторы положени€ шаров в момент времени t = 0, м;
  %%m1, m2 Ч массы шаров, кг;
  %%r1, r2 Ч радиусы шаров, м;
  %%t Ч врем€ окончани€ моделировани€, с;
  %%dt Ч шаг модельного времени, с (сколько секунд проходит за один шаг моделировани€);
  %%ft Ч длительность одного кадра, c.
  
  figure();
  %подписываем оси
  xlabel('X');
  ylabel('Y');
  %%включаем сетку
  grid on
  %% ќдинаковый масштаб по ос€м
  axis equal
  %% ѕределы осей
  xlim([0,2]);
  ylim([0,2]);
  %%фиксируем параметры системы координат
  hold on
  flag = 1;
  G = 6.674e-11;
  for i = 0:dt:t
    if norm(x2-x1)<(r1+r2)
      if flag == 1
        [v1, v2] = collide_balls(v1, x1, m1, v2, x2, m2);
        flag = 0;
      end
    else
      flag = 1;
    end
    
    vg = x2 - x1;
    vgl = norm(vg); %‘ункци€ norm(vg) вычисл€ет норму вектора vg, 
    %|| vg ||2 = sum(abs(vg).^2)^1/2.
    vgn = Normalize(vg);

    %  формула из ѕо€снени€ "ќтсюда можно найти ускорение первого шара:Ф
    g1 = G * vgn * m1 * m2 / vgl^2;
    g2 = G * -vgn * m1 * m2 / vgl^2;
      
    a1 = boost(x1, x2, m2);
    a2 = boost(x2, x1, m1);
    B1 = draw_ball(x1, r1, 'r-');
    B2 = draw_ball(x2, r2, 'g-');

    pause(ft);
    delete(B1);
    delete(B2);
    
    v1 = v1 + a1 * dt;
    x1 = x1 + v1 * dt;

    v2 = v2 + a2 * dt;
    x2 = x2 + v2 * dt;
    
      
    title(sprintf('t = %.4f', i));
  end
end

function a = boost(x1, x2, m)
    r = sqrt(sum((x1 - x2).^2));    %рассто€ние между центрами шаров
    e = (x2 - x1)/r;                %единичный вектор, задающий направление ускорени€
    G = 6.6720e-11;
    a = e * G*m/r;
end

%ќтрисовкa шара
function h = draw_ball(x, r, format)
  A = linspace(0,2*pi,64);
  x1 = cos(A).*r+x(1);
  y1 = sin(A).*r+x(2);
  h = plot(x1(:), y1(:), format);
end

%≈диничный вектор;
function vec = Normalize(x)
  vec = x / norm(x);
end

%–асчЄт скоростей шаров после столкновени€
function [v1, v2] = collide_balls(v01, x1, m1, v02, x2, m2)
  R = x2-x1;                 	 
  R=Normalize(R);	 
  S = [-R(2),R(1)];
  %Ѕазис - ’ - нормализованный вектор от шара к другому, 
  %Y - перпендикул€р к нему.
  
 % ѕеревод координат первого шара в систему rCs
  v01(1)=dot(v01,R);
  v01(2)=dot(v01,S);
  
 % ѕеревод координат в систему rCs дл€ второго шара
  v02(1)=dot(v02,R);  
  v02(2)=dot(v02,S);
  
 % —корости сближени€, дл€ сокращени€ записей ниже
  U1 = v01(1);
  U2 = v02(1);
  
  % ѕереход к квадратному уравнению, вычисление коэффициентов a,b,c.
  a = 1 + m2/m1;
  b = -2 * (U1 + m2/m1*U2);
  c = 2*U1*U2 + m2/m1*(U2^2) - U2^2;
  
  % ¬ычисление корней уравнени€ с помощью roots()
  sol = roots([a b c]);
  
  %ќтброс тривиального решени€
  %V1 и V2 -скорости сближени€, как и U1-2, но они нужны дл€ расчетов несколько раз.
  if(abs(sol(1) - U2) > abs(sol(2) - U2))
  V2 = sol(1);
else
  V2 = sol(2);
end
V1 = (m1*U1 + m2*U2 - m2*V2)/m1;

%¬осстановление координат векторов скорости
v2 = R*V2 + S*v02(2);
v1 = R*V1 + S*v01(2);
end